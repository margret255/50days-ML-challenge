# -*- coding: utf-8 -*-
"""BostonHousePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNyeklUiXqmRpMwy2OwO7_Xz6lm77tLh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
import sklearn.datasets

house_price_dataset = sklearn.datasets.load_diabetes()
print(house_price_dataset)

house_price_dataframe=pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)
house_price_dataframe

#target price
house_price_dataframe['price']=house_price_dataset.target
house_price_dataframe

house_price_dataframe

house_price_dataframe.isnull().sum()

house_price_dataframe.describe()

#corelation b2n features
correlation=house_price_dataframe.corr()
correlation

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')
#

X = house_price_dataframe.drop(['price'],axis=1)
Y = house_price_dataframe['price']
print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

#XGRegressor
model=XGRegressor()
model.fit(X_train,Y_train)

#prediction on training data
training_data_prediction=model.predict(X_train)

#R squared Error
score_1=metrics.r2_score(Y_train,training_data_prediction)
score_1
#Mean Absolute Error
score_2=metrics.mean_absolute_error(Y_train,training_data_prediction)
score_2
print('R squared error:',score_1)
print('Mean Absolute Error:',score_2)

#accuracy for testing data
test_data_prediction=model.predict(X_test)

score_1=metrics.r2_score(Y_test,test_data_prediction)
score_1

score_2=metrics.mean_absolute_error(Y_test,test_data_prediction)
score_2
print('R squared error:',score_1)
print('Mean Absolute Error:',score_2)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel('Actual price')
plt.ylabel('Predicted price')
plt.title('Actual price vs Predicted price')
plt.show()